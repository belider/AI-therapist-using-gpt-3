import openai
import os
from datetime import datetime, timedelta
import psycopg2
from telegram.ext import *
from telegram import *
import time

from gpt_wrapper import *
from database_logic import *
from database_class import Database
from payment_callback_listener import *

import pymorphy2
morph = pymorphy2.MorphAnalyzer()
from googletrans import Translator
translator = Translator()

def get_gender_by_user_name(user_name: str, telegram_name: str):
    name = user_name
    gender = morph.parse(name)[0].tag.gender
    if gender == None or gender == 'neut': 
       # translating a user_name
       name = translator.translate(name, dest='ru').text
       print(f'translated user name: {name}')
       gender =  morph.parse(name)[0].tag.gender
    if gender == None or gender == 'neut':
        # translating a telegram name
        name = telegram_name
        print(f'user tg name: {telegram_name}')
        name = translator.translate(name, dest='ru').text
        print(f'translated tg name: {name}')
        gender =  morph.parse(name)[0].tag.gender
        print(f'gender by translated tg name: {gender}')
    if gender == None or gender == 'neut':
        name_split = name.split(' ')
        for name_part in name_split: 
            g = morph.parse(name_part)[0].tag.gender
            print(f'gender by name part "{name_part}": {g}')
            if g == 'masc' or g == 'femn':
                gender = g
    return gender

openai.api_key = os.getenv('OPENAI_API_KEY')
bot_token = os.getenv('BOT_TOKEN')
payment_provider_token = os.getenv('PROVIDER_TOKEN')

db = Database()

print('starting up a bot...')     

def query_handler(update, context): 
    current_dt = datetime.now()
    query = update.callback_query
    update.callback_query.answer()
    
    user_id = query.message.chat.id
    message_dt = query.message.date
    
    if "continue1" in query.data: 
        response_text = """–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç? 

üíÜ‚Äç‚ôÄÔ∏è –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ, –≤ —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞. 
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–∑-–∑–∞..."
–°–æ—Ñ–∏ –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–¥—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é. 

üí≠ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. 
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç —Å ..."
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –°–æ—Ñ–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –∑–Ω–∞–µ—Ç –∏–∑ —Å—Ç–∞—Ç–µ–π –∏ –∫–Ω–∏–≥ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. 

/newsession - –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–π–¥–µ—Ç –≤ —Ç—É–ø–∏–∫"""
        buttons = [[InlineKeyboardButton("‚úîÔ∏è –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_session")]]
        reply_markup = InlineKeyboardMarkup(buttons)

        query.edit_message_text(response_text, reply_markup=reply_markup)
    elif "start_session" in query.data: 
        query.delete_message()
        time.sleep(0.5)

        response_text = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–æ—Ñ–∏. –ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
        query.message.reply_text(response_text)
    
        response_time_delta = datetime.now() - current_dt

        #saving reply message to DB
        insert_message_in_db(db, user_id, is_bot=True, message_text=response_text, message_timestamp=message_dt + response_time_delta)

def start_command(update, context):
    message_dt = update.message.date
    user_id = update.message.chat.id
    message_text = update.message.text.strip()

    # "Sofi is typing..." animation
    context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)

    # savin /start message to DB
    # msg_type = 0 -> user comand
    # msg_type = 1 -> bot answer
    insert_message_in_db(db, user_id, is_bot=False, message_text=message_text, message_timestamp=message_dt)
    
    reply_text = """–ü—Ä–∏–≤–µ—Ç üëã
–°–æ—Ñ–∏ - —ç—Ç–æ –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –û–Ω–∞ —Ö–æ—Ä–æ—à–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ò–Ω–æ–≥–¥–∞ –µ–µ –æ—Ç–≤–µ—Ç—ã —Å–º–µ—à–∞—Ç, –∏–Ω–æ–≥–¥–∞ –Ω–∞–≤–æ–¥—è—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. 

–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. """

    buttons = [[InlineKeyboardButton("‚úîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue1")]]
    reply_markup = InlineKeyboardMarkup(buttons)

    update.message.reply_text(reply_text, reply_markup=reply_markup)

def newsession_command(update, context):
    current_dt = datetime.now()
    message_dt = update.message.date
    user_id = update.message.chat.id

    # "Sofi is typing..." animation
    context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)

    # saving /newsession message to DB
    insert_message_in_db(db, user_id, is_bot=False, message_text=update.message.text.strip(), message_timestamp=update.message.date)

    user_name = get_username_by_userid(db, user_id)

    # constructing prompt
    prompt_starter = '–ù–∏–∂–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –±–µ—Å–µ–¥–∞ —Å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º.\n\n'
    prompt = prompt_starter + '–¢–µ—Ä–∞–ø–µ–≤—Ç: –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–æ—Ñ–∏. –ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n' + f'–Ø: {user_name}\n\n' + '–¢–µ—Ä–∞–ø–µ–≤—Ç:'
    print(f'--> prompt: {prompt}')

    
    response_candidates_text = create_gpt_response(prompt, db, user_id)
    final_response_text = response_candidates_text[0]

    print(f'--> response_text: {final_response_text}')
    update.message.reply_text(final_response_text)

    response_time_delta = datetime.now() - current_dt

    #saving reply message to DB
    insert_message_in_db(db, user_id, is_bot=True, message_text=final_response_text, message_timestamp=message_dt + response_time_delta)


def handle_response(text: str, user_id, context) -> str: 
    # "Sofi is typing..." animation
    context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)

    # select all messages from the previous command
    messages_from_last_command = get_messages_from_last_user_command(db, user_id)

    # getting user name
    user_name = get_username_by_userid(db, user_id)
    
    prompt = construct_prompt_from_messages_history(messages_from_last_command, user_name)
    
    response_candidates_text = create_gpt_response(prompt, db, user_id)
    
    return get_not_repeating_not_empty_response(db, response_candidates_text, messages_from_last_command, user_id)

def handle_message(update, context):
    message_text = str(update.message.text).strip() 
    # message_text = translator.translate(message_text_ru, dest='en').text

    user_id = update.message.chat.id
    message_dt = update.message.date
    user_tg_nick = update.message.from_user.username
    user_tg_name = str(update.message.from_user.first_name) + ' ' + str(update.message.from_user.last_name)
    user_tg_name = user_tg_name.replace('None', '').strip()

    # "Sofi is typing..." animation
    context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)

    current_dt = datetime.now()
    last_user_message = get_last_user_message(db, user_id)

    print(f'User {user_id} says "{message_text}" <- at {message_dt}')
    # saving user message to DB
    insert_message_in_db(db, user_id, is_bot=False, message_text=message_text, message_timestamp=message_dt)

    # checking if this was a reply to Welcome message
    print("==> last_user_message: ", last_user_message)
    if last_user_message == '/start': 
        # then current message is the user's Name

        gender = get_gender_by_user_name(user_name=message_text, telegram_name=user_tg_name)
        print(f'user gender: {gender}')
        # saving user name and gender to DB
        set_or_update_username(db, user_id, message_text, user_tg_nick, user_tg_name, gender)

        if gender == 'femn': 
            response = f"–ü—Ä–∏–≤–µ—Ç, {message_text}. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ –æ–±—Å—É–¥–∏—Ç—å?"
        else: 
            # gender is 'masc', 'neut' or None
            response = f"–ü—Ä–∏–≤–µ—Ç, {message_text}. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –æ–±—Å—É–¥–∏—Ç—å?"
        update.message.reply_text(response)
    
    (paid_limit, paid_limit_status) = get_paid_limit_and_status_by_user(db, user_id)
    if paid_limit_status == 'trial ended': 
        print('User messages limit has ended.')
        # send monetization message
        response = f"""_–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: _

–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ {paid_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–µ–∫. 

–ú—ã —Å—Ç—Ä–µ–º–∏–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å –°–æ—Ñ–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. 
–û–¥–Ω–∞–∫–æ, –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ—Ä–æ–≥–∏–µ –º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã. 

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç –Ω–∞ 500 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ $4.99."""
        buttons = [[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url="https://anybodygo.com/", pay=True)]]
        reply_markup = InlineKeyboardMarkup(buttons)
        update.message.reply_text(response, reply_markup=reply_markup, parse_mode='markdown')
    elif paid_limit_status == 'paid plan ended': 
        # send monetization message
        response = f"""_–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: _

–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ {paid_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ç–µ–∫. 

–ú—ã —Å—Ç—Ä–µ–º–∏–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å –°–æ—Ñ–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. 
–û–¥–Ω–∞–∫–æ, –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ—Ä–æ–≥–∏–µ –º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã. 

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –Ω–∞ 500 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ $4.99."""
        buttons = [[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 399 RUB", url="https://capu.st/bill5eea560c-e12b")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        # context.bot.send_invoice(
        #     chat_id=user_id, 
        #     title="title", 
        #     description="description", 
        #     payload="5", 
        #     provider_token=payment_provider_token, 
        #     currency="RUB", 
        #     prices=[LabeledPrice("label_test", 35000)],
        #     allow_sending_without_reply=True, 
        #     reply_markup=reply_markup
        # )
        update.message.reply_text(response, reply_markup=reply_markup, parse_mode='markdown')
    else: 
        response = handle_response(message_text, user_id, context)
        update.message.reply_text(response)

    response_time_delta = datetime.now() - current_dt
    print(f'Response time: {response_time_delta}')
    
    #saving gpt response to DB
    insert_message_in_db(db, user_id, is_bot=True, message_text=response, message_timestamp=message_dt + response_time_delta)

def error(update, context): 
    print(f'Update: \n{update}\nCaused error: {context.error}')
 
if __name__ == '__main__':
    updater = Updater(bot_token, use_context=True)
    dp = updater.dispatcher
    
    #commands
    dp.add_handler(CommandHandler('start', start_command))
    dp.add_handler(CommandHandler('newsession', newsession_command))

    #messages
    dp.add_handler(MessageHandler(Filters.text, handle_message))
    dp.add_handler(CallbackQueryHandler(query_handler))
    
    #error
    dp.add_error_handler(error)

    #run bot
    updater.start_polling(0.5)
    updater.idle()

    app.run(
        host=HOST,
        port=PORT,
        debug=True
    )